{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Template for how the legacypipe/Tractor pipeline is setup and run on DECam data \n",
    "## Modify accordingly for PTF, ZTF, etc."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Python Stack\n",
    "* At NERSC do the following. This uses Ted Kisner's conda build for DESI imaging code then copies everything to your scratch so you can do \"conda install ...\" for any extra packages you need\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "module use /global/common/$NERSC_HOST/contrib/desi/modulefiles\n",
    "module load desiconda/20170719-1.1.9-imaging\n",
    "conda create --prefix $CSCRATCH/conda-envs/20170719-1.1.9-imaging --file $DESICONDA/pkg_list.txt\n",
    "source activate $CSCRATCH/conda-envs/20170719-1.1.9-imaging"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Make sure it all works by running a test case"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# SF98 dust maps\n",
    "export MYDIR=$CSCRATCH/repos\n",
    "mkdir -p $MYDIR/dust/maps                                                           \n",
    "cd $MYDIR/dust/maps\n",
    "wget -c http://portal.nersc.gov/project/cosmo/temp/dstn/travis-ci/maps/SFD_dust_4096_ngp.fits                                                    \n",
    "wget -c http://portal.nersc.gov/project/cosmo/temp/dstn/travis-ci/maps/SFD_dust_4096_sgp.fits                                                    \n",
    "export DUST_DIR=$MYREPO/dust\n",
    "# imaging pipeline\n",
    "cd $MYDIR\n",
    "git clone https://github.com/legacysurvey/legacypipe.git\n",
    "cd legacypipe\n",
    "git checkout f4fc46ea0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "cd py/test\n",
    "wget https://raw.githubusercontent.com/legacysurvey/obiwan/master/py/obiwan/test/end_to_end/test_decam_rex.p\n",
    "cd ../\n",
    "python py/test_decam_rex.py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setup that went into test/test_decam_rex.py\n",
    "* Environment vars\n",
    " - export DUST_DIR=`$MYREPO`/dust                                                                                         \n",
    " - export LEGACY_SURVEY_DIR=`$MYREPO`/legacypipe/py/test/testcase6\n",
    " - ignore WISE forced photometry for now\n",
    "* Input Files (stored in legacy_survey_dir) \n",
    " 1. fits tables for the 0.25x0.25 deg2 chunks of sky, \"bricks\", to process (survey-bricks.fits.gz), bright star locations to avoid (tycho2.fits.gz), and photometric and astrometric statistics for each CCD (survey-ccds-1.fits.gz)\n",
    " 2. directories containing the image (images/) and calibration (calib/sextractor, calib/psfex) files\n",
    "* Create the calibration files BEFORE running main() below "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What this command does:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "main(args=['--brick', '1102p240', '--zoom', '500', '600', '650', '750',            \n",
    "           '--force-all', '--no-write', '--no-wise',                                                   \n",
    "           '--survey-dir', surveydir,                                              \n",
    "           '--outdir', outdir]) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* \"brick 1102p240\" is in the survey-bricks.fits.gz table. \n",
    "* Legacypipe interpolates 0.25x0.25 deg2 to a 3600x3600 pixel grid\n",
    " - \"zoom 500 600 ...\" analyses only that slice of the full 3600x3600 region\n",
    "* \"force-all, no-write, no-wise\" run everything, dont be verbose, skip WISE forced photometry\n",
    "* \"survey-dir, outdir\" legacy_survey_dir and where to write all legacypipe/tractor outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The main() above does the following:\n",
    "* call the run_brick() function in legacypipe/py/legacypipe/runbrick.py\n",
    "* which runs the 6 \"stages\" of the legacypipe/Tractor pipeline\n",
    " 1. stage_tims: read in all fits tables, images, and calibration data from legacy_survey_dir, save as Tractor Image Objects (tims)                                                        \n",
    " 2. stage_image_coadds                                                      \n",
    " 2. stage_srcs: detect sources at SN >= 6 using five matched filters                                                             \n",
    " 4. stage_fitblobs: finds the best fitting point-source or galaxy model for each source. Each detection is pixel dilated to a group of contiguous pixels called a \"blob\", blobs are processed in parallel, each blob can have many sources                                                          \n",
    " 5. stage_coadds: make coadded image, invvar, model, chi2, and depth images                                                           \n",
    " 6. stage_wise_forced: use best fit models to do forced photometry on WISE imaging\n",
    " 7. stage_writecat: write Tractor catalogues\n",
    " \n",
    "REMEMBER: create the calibration files BEFORE running legacypipe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Code you'll need to write \n",
    "* decam.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# https://github.com/legacysurvey/legacypipe/blob/master/py/legacypipe/decam.py\n",
    "# Edited to be barebones\n",
    "from __future__ import print_function\n",
    "import os\n",
    "import numpy as np\n",
    "import fitsio\n",
    "from legacypipe.image import CalibMixin\n",
    "from legacypipe.cpimage import CPImage\n",
    "from legacypipe.survey import LegacySurveyData\n",
    "\n",
    "'''\n",
    "Code specific to images from the Dark Energy Camera (DECam).\n",
    "'''\n",
    "\n",
    "class DecamImage(CPImage, CalibMixin):\n",
    "    '''\n",
    "    A LegacySurveyImage subclass to handle images from the Dark Energy\n",
    "    Camera, DECam, on the Blanco telescope.\n",
    "    '''\n",
    "    # background subtraction fitting spline to every 512 pixels, interpolating between\n",
    "    splinesky_boxsize = 512\n",
    "\n",
    "    def __init__(self, survey, t):\n",
    "        super(DecamImage, self).__init__(survey, t)\n",
    "        # Check that these are set properly\n",
    "        #self.imgfn # image relative path starting from legacy_survey_dir/images/\n",
    "        #self.dqfn # bad pixel image\n",
    "        #self.wtfn # invvar image\n",
    "        \n",
    "        # zeropoint units in ADU/sec\n",
    "        self.ccdzpt += 2.5 * np.log10(self.exptime)\n",
    "        \n",
    "    def __str__(self):\n",
    "        return 'DECam ' + self.name\n",
    "\n",
    "    @classmethod\n",
    "    def nominal_zeropoints(self):\n",
    "        # Units ADU/sec for a good night 2 years ago\n",
    "        return dict(g = 25.08,\n",
    "                    r = 25.29,\n",
    "                    z = 24.92,)\n",
    "    \n",
    "    @classmethod\n",
    "    def photometric_ccds(self, survey, ccds):\n",
    "        \"\"\"Remove exposures from survey-ccds-1.fits.gz if image quality not \n",
    "        good enough\n",
    "        \n",
    "        Args:\n",
    "          ccds: the survey-ccds-1.fits.gz table\n",
    "        \"\"\"\n",
    "        # Nominal zeropoints (DECam)\n",
    "        z0 = self.nominal_zeropoints()\n",
    "        z0 = np.array([z0[f[0]] for f in ccds.filter])\n",
    "        # You can skipping removing any of them with:\n",
    "        good = np.ones(len(ccds), bool)\n",
    "        return np.flatnonzero(good)\n",
    "\n",
    "    @classmethod\n",
    "    def ccd_cuts(self, survey, ccds):\n",
    "        return np.zeros(len(ccds), np.int32)\n",
    "\n",
    "    def get_good_image_subregion(self):\n",
    "        \"\"\"Optional\"\"\"\n",
    "        x0,x1,y0,y1 = None,None,None,None\n",
    "        # x0,x1,y0,y1 = 100,1023,100,self.height-100\n",
    "        return x0,x1,y0,y1\n",
    "\n",
    "    def read_dq(self, header=False, **kwargs):\n",
    "        \"\"\"read bad pixel image and possibly its header\"\"\"\n",
    "        print('Reading data quality from', self.dqfn, 'hdu', self.hdu)\n",
    "        dq,hdr = self._read_fits(self.dqfn, self.hdu, header=True, **kwargs)\n",
    "        if header:\n",
    "            return dq,hdr\n",
    "        else:\n",
    "            return dq\n",
    "\n",
    "    def read_invvar(self, clip=True, clipThresh=0.2, **kwargs):\n",
    "        print('Reading inverse-variance from', self.wtfn, 'hdu', self.hdu)\n",
    "        invvar = self._read_fits(self.wtfn, self.hdu, **kwargs)\n",
    "        return invvar\n",
    "\n",
    "    def run_calibs(self, psfex=True, sky=True, se=False,\n",
    "                   funpack=False, fcopy=False, use_mask=True,\n",
    "                   force=False, just_check=False, git_version=None,\n",
    "                   splinesky=False):\n",
    "        \"\"\"Read psfex PSF model and splinesky model\"\"\"\n",
    "        self.read_psf_model(0, 0, pixPsf=True, hybridPsf=True)\n",
    "        self.read_sky_model(splinesky=splinesky)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* WCS \n",
    " - write TPV formation keys to the header of each image, something like this"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "CTYPE2  = 'DEC--TPV'           / WCS projection type for this axis\n",
    "CTYPE1  = 'RA---TPV'           / WCS projection type for this axis\n",
    "CRVAL1  =       121.7780402905 / World coordinate on this axis\n",
    "CRVAL2  =       9.777517812217 / World coordinate on this axis\n",
    "CRPIX1  =              13422.2 / Reference pixel on this axis\n",
    "CRPIX2  =             6306.333 / Reference pixel on this axis\n",
    "CD1_1   =   4.088761751834E-08 / Linear projection matrix\n",
    "CD1_2   =    7.28654335298E-05 / Linear projection matrix\n",
    "CD2_1   =  -7.286249453005E-05 / Linear projection matrix\n",
    "CD2_2   =   4.829789501779E-09 / Linear projection matrix\n",
    "PV1_7   =   0.0001292520097439 / Projection distortion parameter\n",
    "PV2_8   =    -0.01085639046593 / Projection distortion parameter\n",
    "PV2_9   =    0.006447478695312 / Projection distortion parameter\n",
    "PV2_0   =   -0.005865638033892 / Projection distortion parameter\n",
    "PV2_1   =       1.022934665377 / Projection distortion parameter\n",
    "PV2_2   =   -0.009988184329701 / Projection distortion parameter\n",
    "PV2_3   =                  0.0 / PV distortion coefficient\n",
    "PV2_4   =    -0.02553759230415 / Projection distortion parameter\n",
    "PV2_5   =     0.02039038294948 / Projection distortion parameter\n",
    "PV2_6   =   -0.009420461615663 / Projection distortion parameter\n",
    "PV2_7   =    0.009366132237292 / Projection distortion parameter\n",
    "PV1_6   =     0.01073408153216 / Projection distortion parameter\n",
    "PV2_10  =   -0.002902607846633 / Projection distortion parameter\n",
    "PV1_4   =    0.007984725876406 / Projection distortion parameter\n",
    "PV1_3   =                  0.0 / PV distortion coefficient\n",
    "PV1_2   =    -0.01061382938526 / Projection distortion parameter\n",
    "PV1_1   =       1.015157192369 / Projection distortion parameter\n",
    "PV1_0   =    0.004301039435068 / Projection distortion parameter\n",
    "PV1_9   =    0.007785488836336 / Projection distortion parameter\n",
    "PV1_8   =   -0.007287409639159 / Projection distortion parameter\n",
    "PV1_5   =    -0.02011363647483 / Projection distortion parameter\n",
    "PV1_10  =   -0.003686927828818 / Projection distortion parameter"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That should be 99% of getting it running"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
